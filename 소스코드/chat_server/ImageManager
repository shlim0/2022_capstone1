#ifndef __IMAGEMANAGER__
#define __IMAGEMANAGER__

#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <string>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <sys/epoll.h>
#include <string.h>
#include <vector>

using namespace std;

class ImageManager {
public:
    string get_new_image_path(const int user_id);
    void save(const string& image_path, const vector<char>& image);
};

string ImageManager::get_new_image_path(const int chat_room_id) {
    /* 이미지 서버에 연결 */
    int sock = socket(PF_INET, SOCK_STREAM, 0);
    struct sockaddr_in serv_addr;

    memset(&serv_addr, 0, sizeof(serv_addr));

    serv_addr.sin_family = AF_INET;
    serv_addr.sin_addr.s_addr = inet_addr(IMAGE_SERVER);
    serv_addr.sin_port = htons(IMAGE_SERVER_PORT);

    if (connect(sock, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) == -1) {
        printf("ImageManager::get_new_image_path(), connect() error\n");
        exit(0);
    }
    /*********************/

    /* http 만들기 */
    string message = "POST /" + to_string(chat_room_id) + "/image-count HTTP/1.1\r\n"
    + "\r\n";
    /**************/

    /* 데이터 전송 */
    write(sock, message.c_str(), message.size());
    /***************/

    /* 이미 존재하는 파일 개수를 응답으로 받기 */
    char buffer[BUFFER_SIZE];
    const int read_count = read(sock, buffer, BUFFER_SIZE);

    char *cur = strstr(buffer, "\r\n\r\n");
    if (cur == nullptr) {
        printf("ImageManager::get_new_image_path(), receive body error\n");
        exit(0);
    }

    cur += 4;
    vector<char> body_buffer;
    for (char* i = cur; i < buffer + BUFFER_SIZE; ++i) {
        body_buffer.push_back(*i);
    }

    const int file_count = stoi(string(&body_buffer[0]));
    /*********************************************/

    close(sock);
    const string result = "/" + to_string(chat_room_id) + "/" + to_string(file_count);
    return result;
}

void ImageManager::save(const string& image_path, const vector<char>& image) {
    /* 이미지 서버에 연결 */
    int sock = socket(PF_INET, SOCK_STREAM, 0);
    struct sockaddr_in serv_addr;

    memset(&serv_addr, 0, sizeof(serv_addr));

    serv_addr.sin_family = AF_INET;
    serv_addr.sin_addr.s_addr = inet_addr(IMAGE_SERVER);
    serv_addr.sin_port = htons(IMAGE_SERVER_PORT);

    if (connect(sock, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) == -1) {
        printf("ImageManager::save(), connect() error\n");
        return;
    }
    /*********************/

    /* http 만들기 */
    string message = "POST " + image_path + " HTTP/1.1\r\n"
    + "Content-Length: " + to_string(image.size()) + "\r\n";
    + "\r\n";

    for (const char byte : image) {
        message += byte;
    }
    /**************/

    /* 데이터 전송 */
    write(sock, message.c_str(), message.size());
    /***************/

    close(sock);
}

#endif